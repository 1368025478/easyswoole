<?php


namespace EasySwoole\EasySwoole\Test;


use EasySwoole\EasySwoole\Logger;
use EasySwoole\EasySwoole\Trigger;
use EasySwoole\Log\Logger as DefaultLogger;
use EasySwoole\Utility\File;
use EasySwoole\Trigger\Trigger as DefaultTrigger;
use PHPUnit\Framework\TestCase;

class TriggerTest extends TestCase
{
    protected $logPath;
    protected $logHandel;

    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->addLogPath();
        $this->initLog();
        $trigger = new DefaultTrigger($this->logHandel);
        Trigger::getInstance($trigger);
    }

    protected function initLog()
    {
        $logger = new DefaultLogger($this->logPath);

        $this->logHandel = new Logger($logger);
    }

    protected function addLogPath()
    {
        $logPath = getcwd() . '/temp';
        $result = File::createDirectory($logPath);
        $this->assertTrue(!!$result);
        $this->logPath = $logPath;
    }

    function testError()
    {
        $msg = '这是测试消息';
        $errorCode = E_NOTICE;
        Trigger::getInstance()->onError()->set('onError', function ($msg2, $errorCode2, $location2) use ($msg, $errorCode) {
            $this->assertEquals($msg, $msg2);
            $this->assertEquals($errorCode, $errorCode2);
        });
        Trigger::getInstance()->error($msg, $errorCode);
    }

    function testThrowable()
    {
        $testException = new \Exception('这是测试消息');
        Trigger::getInstance()->onException()->set('onException', function ($throwable) use ($testException) {
            $this->assertEquals($testException,$throwable);
        });
        Trigger::getInstance()->throwable($testException);

    }

}